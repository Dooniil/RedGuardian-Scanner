from src.executors.windows import exec_command
from src.encryption_manager import encryption_manager

class VulnerabilityHandler:

    @staticmethod
    def get_found_vulnerability(host_id: int, results: list) -> dict:
        tmp_dict = {
            host_id: dict(cpe=None, vulnerabilities=list(), product=list())
        }
        if not results:
            return {host_id: 'Хост недоступен'}
        for result in results:
            if result.get('cpe') and not tmp_dict[host_id].get('cpe'):
                tmp_dict[host_id]['cpe'] = result.get('cpe')
            if result.get('found'):
                tmp_dict[host_id]['vulnerabilities'].append(result.get('id'))
            if result.get('cpe_product'):
                if result.get('cpe_product') not in tmp_dict[host_id]['product']:
                    tmp_dict[host_id]['product'].append(result.get('cpe_product'))

        return tmp_dict

    @staticmethod
    def scan(task) -> dict:
        login_encrypted, password_encrypted = task.get('credential')['login'], task.get('credential')['password']
        login, password = encryption_manager.decrypt(login_encrypted), encryption_manager.decrypt(password_encrypted)
        
        hosts: list = task.get('settings')['hosts']
        definitions = task.get('exec_defs')

        result_dict = dict()
        for host in hosts:
            target = host.get('ip')
            if host.get('dns'):
                target = host.get('dns')
            try:      
                results: list = exec_command(target, login, password, definitions)
                result_dict.update(VulnerabilityHandler.get_found_vulnerability(host.get('id'), results))
            except Exception as e:
                result_dict.update(VulnerabilityHandler.get_found_vulnerability(host.get('id'), list()))
        return result_dict
